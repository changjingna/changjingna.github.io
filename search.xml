<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo建站系列-第五篇</title>
      <link href="2021/03/06/Hexo%E5%BB%BA%E7%AB%99%E7%B3%BB%E5%88%97-%E7%AC%AC%E4%BA%94%E7%AF%87/"/>
      <url>2021/03/06/Hexo%E5%BB%BA%E7%AB%99%E7%B3%BB%E5%88%97-%E7%AC%AC%E4%BA%94%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>小站新添加了标签页、分类页、搜索框、不蒜子统计、音乐播放器，试试吧~</p><h2 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h2><p>为cactus主题开启标签页。</p><p>1、使用命令生成标签页</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>（此时生成 source/tags/index.md）</p><p>2、在 tags/index.md里添加 type: tags</p><p>3、在导航栏里添加链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nav:</span><br><span class="line">  tags: &#x2F;tags&#x2F;</span><br></pre></td></tr></table></figure><p>4、使用<br>在博客页面中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tags:</span><br><span class="line">- tag1</span><br><span class="line">- tag2</span><br></pre></td></tr></table></figure><h2 id="分类页"><a href="#分类页" class="headerlink" title="分类页"></a>分类页</h2><p>和添加标签页类似。<br>在对应 tags 的地方换成 categories 即可。</p><h2 id="搜索页"><a href="#搜索页" class="headerlink" title="搜索页"></a>搜索页</h2><p>1、npm install hexo-generator-search –save</p><p>2、hexo new page search</p><p>3、在/search/index.md添加 type: search</p><p>4、添加导航</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nav:</span><br><span class="line">    search: &#x2F;search&#x2F;</span><br></pre></td></tr></table></figure><h2 id="不蒜子统计"><a href="#不蒜子统计" class="headerlink" title="不蒜子统计"></a>不蒜子统计</h2><p>1、在主题的config.yml里配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">busuanzi:</span><br><span class="line">    enabled: true</span><br></pre></td></tr></table></figure><p>2、在layout/_partial/footer.ejs里添加脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if(theme.busuanzi &amp;&amp; theme.busuanzi.enabled)&#123; %&gt;</span><br><span class="line">  &lt;!--不蒜子统计--&gt;</span><br><span class="line">  &lt;script async src&#x3D;&quot;&#x2F;&#x2F;busuanzi.ibruce.info&#x2F;busuanzi&#x2F;2.3&#x2F;busuanzi.pure.mini.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;span id&#x3D;&quot;busuanzi_container_site_pv&quot;&gt;本站总访问量&lt;span id&#x3D;&quot;busuanzi_value_site_pv&quot;&gt;&lt;&#x2F;span&gt;次&lt;&#x2F;span&gt;%&gt;</span><br><span class="line">  &lt;span id&#x3D;&quot;busuanzi_container_site_uv&quot;&gt;本站访客数&lt;span id&#x3D;&quot;busuanzi_value_site_uv&quot;&gt;&lt;&#x2F;span&gt;人&lt;&#x2F;span&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><h2 id="音乐播放器"><a href="#音乐播放器" class="headerlink" title="音乐播放器"></a>音乐播放器</h2><p>使用hexo-tag-aplayer插件。</p><p>1、hexo new page playlist</p><p>2、在 playlist/index.md中添加 type: playlist</p><p>3、在目前所用语言zh-CN.yml文件里添加对应的中文翻译：playlist: 歌单</p><p>4、npm install –save hexo-tag-aplayer</p><p>5、在根目录下的_config.yml里添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aplayer:</span><br><span class="line">  meting: true</span><br></pre></td></tr></table></figure><p>6、在 playlist/index.md里添加歌单信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% meting &quot;6628821650&quot; &quot;netease&quot; &quot;playlist&quot; &quot;autoplay&quot; &quot;preload:auto&quot; &quot;theme:#228B22&quot; %&#125;</span><br></pre></td></tr></table></figure><p>7、过程中遇到过的报错<br>[hexo-tag-aplayer] Meting support is disabled<br>我将 preload 由原来的 none 修改为 auto 后就好了。</p><h2 id="待做中…"><a href="#待做中…" class="headerlink" title="待做中…"></a>待做中…</h2><p>1、代码高亮，目前没有达到喜欢的效果。<br>2、文章字数 + 阅读时长统计</p>]]></content>
      
      
      <categories>
          
          <category> 建站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo建站-常用git命令</title>
      <link href="2021/03/03/Hexo%E5%BB%BA%E7%AB%99-%E5%B8%B8%E7%94%A8git%E5%91%BD%E4%BB%A4/"/>
      <url>2021/03/03/Hexo%E5%BB%BA%E7%AB%99-%E5%B8%B8%E7%94%A8git%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>1、git init（初始化仓库）</p><p>2、git status</p><p>3、git add .</p><p>4、git commit -m ‘feat-init’</p><p>5、git push –set-upstream origin myblogcode</p><p>6、git pull (可以merge代码)</p>]]></content>
      
      
      <categories>
          
          <category> 建站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指32II-从上到下打印二叉树</title>
      <link href="2021/02/25/%E5%89%91%E6%8C%8732II-%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>2021/02/25/%E5%89%91%E6%8C%8732II-%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>从上到下按层打印二叉树，同一层的节点按从左到右的顺序打印，每一层打印到一行。</p><p>例如:<br>给定二叉树: [3,9,20,null,null,15,7]</p><pre><code>3</code></pre><p>   / \<br>  9  20<br>    /  \<br>   15   7<br>返回其层次遍历结果：</p><p>[<br>  [3],<br>  [9,20],<br>  [15,7]<br>]<br> <br>提示：<br>节点总数 &lt;= 1000</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-ii-lcof">https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-ii-lcof</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;number[][]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> levelOrder = function(root) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> [];</span><br><span class="line">    <span class="keyword">const</span> queue = [root]; <span class="comment">//队列</span></span><br><span class="line">    <span class="keyword">const</span> res = []; <span class="comment">//存放遍历结果</span></span><br><span class="line">    let level = <span class="number">0</span>; <span class="comment">//代表当前层数</span></span><br><span class="line">    <span class="keyword">while</span>(queue.length)&#123;</span><br><span class="line">        res[level] = []; <span class="comment">//第level层的遍历结果</span></span><br><span class="line">        let levelNum = queue.length; <span class="comment">//第level层的节点个数</span></span><br><span class="line">        <span class="keyword">while</span>(levelNum--)&#123;</span><br><span class="line">            <span class="keyword">const</span> front = queue.shift();</span><br><span class="line">            res[level].push(front.val);</span><br><span class="line">            <span class="keyword">if</span>(front.left) queue.push(front.left);</span><br><span class="line">            <span class="keyword">if</span>(front.right) queue.push(front.right);</span><br><span class="line">        &#125;</span><br><span class="line">        level++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 基础练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo如何修改主题样式</title>
      <link href="2021/02/20/hexo%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9%E4%B8%BB%E9%A2%98%E6%A0%B7%E5%BC%8F/"/>
      <url>2021/02/20/hexo%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9%E4%B8%BB%E9%A2%98%E6%A0%B7%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>起初是想要修改这个特定主题的主页，将一些信息替换为自己的，尝试了一波没有成功，就想到要了解一下Hexo是怎样生成特定主题的。</p><h2 id="学习笔记"><a href="#学习笔记" class="headerlink" title="学习笔记"></a>学习笔记</h2><h3 id="Hexo全局变量"><a href="#Hexo全局变量" class="headerlink" title="Hexo全局变量"></a>Hexo全局变量</h3><p>Hexo全局变量：site, page, config, theme等<br>site: eg. site.data.projects //根据主题作者的使用说明，指的是在 source下建：_data/projects.json目录与文件<br>config: 指的是本hexo项目的_config.yml<br>theme: 指的是主题里的_config.yml</p><h3 id="ejs"><a href="#ejs" class="headerlink" title="ejs"></a>ejs</h3><p>ejs是一种用于生成html的模板语言，目前我们需要知道：<br>1.&lt;%- %&gt;里包含要写到页面的内容<br>2.&lt;% %&gt;里包含不需要输出的js代码</p><p>参考：<br><a href="https://segmentfault.com/a/1190000008040387#articleHeader1">从零开始制作Hexo主题</a><br><a href="https://www.maintao.com/2014/hexo-theme-from-scratch/">从零开始定制hexo主题</a></p>]]></content>
      
      
      <categories>
          
          <category> 建站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo建站-探索原理1</title>
      <link href="2021/02/19/hexo-second-blog/"/>
      <url>2021/02/19/hexo-second-blog/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>使用hexo新增一篇博客。</p><h2 id="npm常用命令学习"><a href="#npm常用命令学习" class="headerlink" title="npm常用命令学习"></a>npm常用命令学习</h2><p>npm全称是node package manager，是随NodeJs一起安装的包管理和分发工具，它让开发者很方便的下载、安装、上传以及管理已经安装的包。</p><h3 id="npm-install"><a href="#npm-install" class="headerlink" title="npm install"></a>npm install</h3><p>该命令根据dependencies配置安装所有的依赖包，自动安装到开发目录的node_modules下。<br>通过以下选项，安装包将信息保持到项目的package.json文件中。<br>-S, –save安装包信息会加到dependencies(生产阶段的依赖)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save 或 npm run install -S</span><br></pre></td></tr></table></figure><p>-D, –save-dev安装包信息会加到devDependencies(开发阶段的依赖)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev 或 npm run install -D</span><br></pre></td></tr></table></figure><h3 id="npm-run"><a href="#npm-run" class="headerlink" title="npm run"></a>npm run</h3><p>该命令主要是执行package.json中的脚本命令scripts的内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run deploy</span><br></pre></td></tr></table></figure><p>运行package.json中的scripts: deploy,即”hexo deploy”，部署网站，<br>执行hexo deploy时，Hexo会将public目录中的文件和目录推送至_config.yml中指定的远端仓库和分支中，并且完全覆盖该分支下的已有内容。</p><h2 id="如何理解actions做了什么"><a href="#如何理解actions做了什么" class="headerlink" title="如何理解actions做了什么"></a>如何理解actions做了什么</h2><p>使用github actions可以实现代码的自动化部署，它的配置见  github/.workflow/deploy.yml 文件。<br>workflow文件的配置字段：<br>（1）on: 指定触发 workflow 的事件，如 git的”push”；<br>（2）jobs： 表示要执行的一项或多项任务，需要自定义任务的job_id，而每个任务的name则是对该任务的说明。<br>（3）runs-on：指定运行的虚拟环境，是必填字段；<br>（4）steps: 指定每个job的运行步骤。<br>这里用的是别人已经写好的一个[action] (JamesIves/github-pages-deploy-action)。</p><p>当我们修改源码后，将本地修改提交到远程仓库，这时候因为用了 push 命令，就会触发 github/.workflow/deploy.yml 的workflow，根据配置执行以下操作：<br>（1）Checkout： 获取源码<br>（2）Install and Build：安装和构建<br>（3）Deploy：部署</p>]]></content>
      
      
      <categories>
          
          <category> 建站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用hexo+github搭建免费个人博客</title>
      <link href="2021/02/18/hexo-first-blog/"/>
      <url>2021/02/18/hexo-first-blog/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Welcome to my first blog. This blog use <a href="https://hexo.io/">Hexo</a> and <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><p>参考：<a href="https://www.bilibili.com/video/BV1dt4y1Q7UE?p=1">https://www.bilibili.com/video/BV1dt4y1Q7UE?p=1</a></p><h2 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h2><h3 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装"></a>本地安装</h3><p>本地需要安装: Git, Node.js, Hexo.</p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>在E盘创建一个文件夹，用于放创建该博客的项目代码，打开命令行，进入这个文件夹下，输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>使用命令检查是否安装成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>使用hexo框架创建一个项目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init myblog</span><br><span class="line">cd myblog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>myblog项目新建成功，然后用VScode打开该项目，使用命令运行项目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在浏览器输入 localhost:4000 就可以看到生成的博客了。</p><h3 id="换一个好看的主题"><a href="#换一个好看的主题" class="headerlink" title="换一个好看的主题"></a>换一个好看的主题</h3><p>在github中搜索 hexo theme，然后按照 most stars的顺序来查找，这里使用的是 <a href="https://github.com/probberechts/hexo-theme-cactus">cactus</a>主题。<br>按照博主的说明，将该主题的代码复制到项目中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;probberechts&#x2F;hexo-theme-cactus.git themes&#x2F;cactus</span><br></pre></td></tr></table></figure><p>并在项目中配置这个主题，打开 _config.yml文件修改theme属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: cactus</span><br></pre></td></tr></table></figure><h3 id="GitHub创建个人仓库"><a href="#GitHub创建个人仓库" class="headerlink" title="GitHub创建个人仓库"></a>GitHub创建个人仓库</h3><p>创建一个和自己用户名xxx相同的仓库，并且在名字后面加上 .github.io，这样就可以部署到 Github page上，并且访问地址就是  <a href="https://xxx.github.io/">https://xxx.github.io</a> ，分支在master分支上。</p><p>这里有两种方式：<br>（1）https://[username].github.io， 仓库名必须为 username.github.io，打包产物必须部署到master分支上，适合部署个人博客；<br>（2）https://[username].github.io/rep ，仓库名可以自定义，打包产物必须在 gh-pages 分支上，适合部署给自己的开源项目然后做Demo演示页面。</p><p>（PS:创建仓库时发现，github目前可以免费创建私有仓库啦，最多支持4人协作。）</p><h3 id="将Hexo部署到GitHub"><a href="#将Hexo部署到GitHub" class="headerlink" title="将Hexo部署到GitHub"></a>将Hexo部署到GitHub</h3><p>安装deploy-git：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>初始化仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>添加远程仓库地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https:&#x2F;&#x2F;github.com&#x2F;changjingna&#x2F;cjn.github.io.git</span><br></pre></td></tr></table></figure><p>修改项目配置 _config.yml:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;changjingna&#x2F;changjingna.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>部署代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run deploy</span><br></pre></td></tr></table></figure><p>在 github 的个人仓库点击”Settings”，往下滑找到 “GitHub page”，点击<a href="https://changjingna.github.io/">地址</a>, 查看博客是否部署成功。</p><h2 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h2><p>1、提交源代码<br>创建 myblogcode 分支，将源代码提交到个人仓库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line"></span><br><span class="line">git commit -m &#39;feat-init&#39;</span><br><span class="line"></span><br><span class="line">git push --set-upstream origin myblogcode</span><br></pre></td></tr></table></figure><p>（本地创建分支myblogcode比较方便，点击 Vscode 左下角的 master，上方就会有操作提示）</p><p>2、使用github actions 实现自动化部署<br>（1）创建一个配置文件使用actions<br>创建文件夹：.github -&gt; workflows<br>创建文件：deploy.yml<br>deploy.yml内容使用b站up主已经写好的内容。</p><p>（2）将修改过的项目代码提交到myblogcode分支上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line"></span><br><span class="line">git commit -m &#39;feat: add github action&#39;</span><br><span class="line"></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>这样每次修改项目代码后，将代码提交到myblogcode分支上，由 actions 实现代码的自动化部署。</p><h2 id="在线编辑博客"><a href="#在线编辑博客" class="headerlink" title="在线编辑博客"></a>在线编辑博客</h2><p>一个比较巧妙的方式，通过提供一个链接到github编辑博客对应的markdown文件。</p>]]></content>
      
      
      <categories>
          
          <category> 建站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
